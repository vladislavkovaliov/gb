#!/bin/bash
# Smart git branch helper ‚Äî with safe existing branch handling

set -e

if [ -z "$1" ]; then
  echo "‚ùå Input name of branch, examples:"
  echo "   gb feature"
  echo "   gb dev"
  exit 1
fi

branch_name="$1"

# non-selected branches
no_type_branches=("dev" "develop" "main" "master" "staging" "release")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ gum
if ! command -v gum >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  gum is not installed. Install via:"
  echo "   brew install charmbracelet/tap/gum   # macOS"
  echo "   sudo apt install gum                 # Ubuntu/Debian"
  exit 1
fi

checkout_or_create_branch() {
  local new_branch="$1"

  git fetch --quiet

  # Locally branch is already exist 
  if git rev-parse --verify "$new_branch" >/dev/null 2>&1; then
    echo "üîÅ –í–µ—Ç–∫–∞ '$new_branch' is already exist. Switching..."
    git checkout "$new_branch"
    return
  fi

  # Check branch in origin  if git ls-remote --exit-code --heads origin "$new_branch" >/dev/null 2>&1; then
    echo "üåê Found '$new_branch' in origin. Craeting local copy..."
    git fetch origin "$new_branch":"$new_branch"
    git checkout "$new_branch"
    return
  fi

  # Making base branch
  base_branch=""
  if git show-ref --verify --quiet refs/remotes/origin/develop; then
    base_branch="origin/develop"
  elif git show-ref --verify --quiet refs/remotes/origin/main; then
    base_branch="origin/main"
  elif git show-ref --verify --quiet refs/heads/develop; then
    base_branch="develop"
  elif git show-ref --verify --quiet refs/heads/main; then
    base_branch="main"
  else
    base_branch="HEAD"
  fi

  echo "‚ú® Checking out a new branch '$new_branch' from $base_branch..."
  git checkout -B "$new_branch" "$base_branch"
}

if [[ " ${no_type_branches[*]} " =~ " ${branch_name} " ]]; then
  # Locally branch is already exist
  if git rev-parse --verify "$branch_name" >/dev/null 2>&1; then
    echo "üîÅ Checking out '$branch_name'..."
    git checkout "$branch_name"
    exit 0
  fi

  # Remotelly branch is already exist
  if git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1; then
    echo "üåê '$branch_name' is found in origin. Creating local copy..."
    git fetch origin "$branch_name":"$branch_name"
    git checkout "$branch_name"
    exit 0
  fi

  echo "‚ú® Creating a new branch '$branch_name' from main..."
  git checkout -b "$branch_name" main
  exit 0
fi

types=("fix" "feat" "refactor" "ci" "chore" "test" "docs")
selected_type=$(gum choose "${types[@]}")

if [ -z "$selected_type" ]; then
  echo "‚ùå Non selected."
  exit 1
fi

new_branch="${selected_type}/${branch_name}"
checkout_or_create_branch "$new_branch"
