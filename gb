#!/bin/bash
# Smart git branch helper ‚Äî —É—Å—Ç–æ–π—á–∏–≤ –∫ "fatal: not a valid object name"

set -e  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

if [ -z "$1" ]; then
  echo "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
  echo "   gb N2PPOD-2222-feature"
  echo "   gb dev"
  exit 1
fi

branch_name="$1"

# –í–µ—Ç–∫–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
no_type_branches=("dev" "develop" "main" "master" "staging" "release")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è gum
if ! command -v gum >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  gum –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ —á–µ—Ä–µ–∑:"
  echo "   brew install charmbracelet/tap/gum   # macOS"
  echo "   sudo apt install gum                 # Ubuntu/Debian"
  exit 1
fi

# --- –§—É–Ω–∫—Ü–∏—è: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ / —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ ---
checkout_or_create_branch() {
  local new_branch="$1"

  git fetch --qui[48;47;171;1598;2736tet

  # –ï—Å–ª–∏ –≤–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
  if git rev-parse --verify "$new_branch" >/dev/null 2>&1; then
    echo "üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É '$new_branch'..."
    git checkout "$new_branch"
    return
  fi

  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ origin
  if git ls-remote --exit-code --heads origin "$new_branch" >/dev/null 2>&1; then
    echo "üåê –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ç–∫–∞ '$new_branch' –≤ origin. –°–æ–∑–¥–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é..."
    git fetch origin "$new_branch":"$new_branch"
    git checkout "$new_branch"
    return
  fi

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –±–∞–∑—É
  base_branch=""
  if git show-ref --verify --quiet refs/remotes/origin/develop; then
    base_branch="origin/develop"
  elif git show-ref --verify --quiet refs/remotes/origin/main; then
    base_branch="origin/main"
  elif git show-ref --verify --quiet refs/heads/develop; then
    base_branch="develop"
  elif git show-ref --verify --quiet refs/heads/main; then
    base_branch="main"
  else
    echo "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã origin/main –∏–ª–∏ origin/develop ‚Äî —Å–æ–∑–¥–∞—é –≤–µ—Ç–∫—É –æ—Ç —Ç–µ–∫—É—â–µ–π HEAD."
    base_branch="HEAD"
  fi

  echo "‚ú® –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ç–∫—É '$new_branch' –æ—Ç $base_branch..."
  git checkout -B "$new_branch" "$base_branch"
}

# --- –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å ---
if [[ " ${no_type_branches[*]} " =~ " ${branch_name} " ]]; then
  checkout_or_create_branch "$branch_name"
  exit 0
fi

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ ---
types=("fix" "feat" "refactor" "ci" "chore" "test" "docs")
selected_type=$(gum choose "${types[@]}")

if [ -z "$selected_type" ]; then
  echo "‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω."
  exit 1
fi

new_branch="${selected_type}/${branch_name}"
checkout_or_create_branch "$new_branch"
